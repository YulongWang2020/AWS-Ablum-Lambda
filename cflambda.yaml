AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Specification template describing your function.


Resources:
  CFindexphotos:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./index-photos-bb86af9d-0a8f-4dea-801c-d34c43d9a44d.zip
      Description: ''
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt LambdaIamRoleindexphoto.Arn
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket:
              Ref: Bucket1
            Events:
              - 's3:ObjectCreated:Put'

  Bucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: cf-stack-ablum-photo

  CFphotosearchaws:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./photo-search-aws-a406f215-43d7-4e34-a431-338a844fd545.zip
      Description: ''
      MemorySize: 128
      Timeout: 3
      Role: >-
        arn:aws:iam::043550019784:role/service-role/photo-search-aws-role-rpwshxpq



  LambdaIamRoleindexphoto:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: AmazonS3FullAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: '*'

        - PolicyName: AmazonRekognitionFullAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "rekognition:*"
                Resource: '*'
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                Resource: '*'
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: '*'

  API:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ablumsearchapi

  Search:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API

      ParentId: !GetAtt
        - API
        - RootResourceId
      PathPart: search
      
  MethodSearch:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref Search
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.q: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CFphotosearchaws.Arn}/invocations
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'

  ApiGatewayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref Search
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'




  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - API
      - CFphotosearchaws
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CFphotosearchaws
      Principal: apigateway.amazonaws.com



  Deployment:
    DependsOn: 
      - MethodSearch
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref API
      Description: COMS-6998 Cloud Formation APIGateway Example by Hyun
      StageName: v1




